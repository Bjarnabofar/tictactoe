/* This build file was auto generated by running the Gradle 'init' task
 * by 'thorhildurt15' at '10/18/16 9:06 PM' with Gradle 3.1
 * This generated file contains a sample Java project to get you started.
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: "com.github.kt3k.coveralls"



mainClassName = "is.ru.tictactoe.TicTacToeWeb"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
	mavenCentral()
}

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
	}
}



//Selenium test
sourceSets {
    	selenium
	seleniumXvfb
}

// JavaDoc
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

//Jacoco is a code coverage plugin for java.
jacoco {
    toolVersion = "0.7.6.201602180812"
}


//jacoco setup
jacocoTestReport{
    reports {
		html.enabled = true
        xml.enabled = true
        csv.enabled false
    }
}
test.finalizedBy jacocoTestReport


//further jacoco config and setup
test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}



//task applicationCodeCoverageReport(type:JacocoReport){
//    executionData run
//    sourceSets sourceSets.main
//}




// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    compile 'com.sparkjava:spark-core:2.5'

	
    //compile 'com.sparkjava:sparl-template-jade:2.3'

    compile 'org.slf4j:slf4j-simple:1.7.9'
    compile 'com.google.code.gson:gson:2.7'

    // Selenium dependencies
    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.0.1'
    seleniumCompile 'org.seleniumhq.selenium:selenium-chrome-driver:3.0.1'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.0.1'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-chrome-driver:3.0.1'

    compile "org.codehaus.groovy:groovy-all:2.2.2"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"


}


task stage {

    dependsOn installDist
}

task selenium(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath
}

task seleniumXvfb(type: Test, dependsOn: installDist) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    doFirst {
        'build/intbtstall/tictactoe/bin/tictactoe &'.execute()
    }

    doLast {
        'sh -e /etc/init.d/xvfb stop'.execute()
    }
}

run {
    standardInput = System.in
}





